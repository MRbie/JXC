<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

		
	<!-- 引入外部配置文件,加载jdbc.properties里面的值 -->
	<!-- <context:property-placeholder location="classpath:jdbc.properties"/> -->
	<!-- 配置数据源dataSource,记得去掉mybatils.cfg.xml的数据源相关配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="user" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/> -->
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/JXC?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
		<property name="user" value="root"/>
		<property name="password" value="123456"/>
	</bean>
	
	<!-- 配置session工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatils.cfg.xml"/>
		<!--配置扫描式加载SQL映射文件,记得去掉mybatis-config配置-->
		<property name="mapperLocations" value="classpath:com/bie/dao/*.xml"/>
	</bean>

	<!-- 配置事务管理器,管理数据源事务处理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置事务通知 -->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 默认只处理运行时异常，可加rollback-for="Exception/Throwable"等处理所有异常或包括错误 -->
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	
	
	<!-- 配置切面织入的范围,后边要把事务边界定在service层 -->
	<aop:config>
		<aop:advisor advice-ref="advice" pointcut="execution(* com.bie.service.impl.*.*(..))" />
	</aop:config>
	
	<!-- 配置SessionTemplate，已封装了繁琐的数据操作 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 开启注解扫描 -->
	<!-- <context:component-scan base-package="*" /> -->

		
	<!-- 自动扫描组件，要把controller去除，他们是在spring-mvc.xml中配置，如果不去除会影响事务管理。 -->
	<context:component-scan base-package="com.bie">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 配置 转换器，对于在basePackage设置的包（包括子包）下的接口类，
		如果接口类的全类名在Mapper.xml文件中和定义过命名空间一致，
	 	将被转换成spring的bean，在调用 的地方通过@Autowired方式将可以注入接口实例 
	--> 
	<!-- 
		注意:
			1、配置mybatis的代理接口开发 
			2、接口类名和映射文件必须同名 
			3、接口类和映射文件必须在同一个目录下 
			4、接口的映射文件的namespace名称必须是接口的全限定名 
        	5、接口的方法名必须和映射的statement的id一致 
    -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<!-- 扫描所有dao接口的实现，加入到ioc容器中  -->
		<property name="basePackage" value="com.bie.dao" />
	</bean>


</beans>